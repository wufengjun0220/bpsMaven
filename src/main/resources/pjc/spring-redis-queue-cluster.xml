<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd"
	default-autowire="byName" default-lazy-init="false">
	
	<description>redis  queue cluster  config</description>
   
     <bean id="redisQueueConfiguration" class="org.springframework.data.redis.connection.RedisClusterConfiguration">
        <property name="maxRedirects" value="3"></property>
        <property name="clusterNodes">
            <set>
                <bean class="org.springframework.data.redis.connection.RedisClusterNode">
                    <constructor-arg name="host" value="${redis.custerqueue.host1}"/>
                    <constructor-arg name="port" value="${redis.custerqueue.port1}"/>
                </bean>
                <bean class="org.springframework.data.redis.connection.RedisClusterNode">
                    <constructor-arg name="host" value="${redis.custerqueue.host2}"/>
                    <constructor-arg name="port" value="${redis.custerqueue.port2}"/>
                </bean>
                <bean class="org.springframework.data.redis.connection.RedisClusterNode">
                    <constructor-arg name="host" value="${redis.custerqueue.host3}"/>
                    <constructor-arg name="port" value="${redis.custerqueue.port3}"/>
                </bean>
                <bean class="org.springframework.data.redis.connection.RedisClusterNode">
                    <constructor-arg name="host" value="${redis.custerqueue.host4}"/>
                    <constructor-arg name="port" value="${redis.custerqueue.port4}"/>
                </bean>
                <bean class="org.springframework.data.redis.connection.RedisClusterNode">
                   <constructor-arg name="host" value="${redis.custerqueue.host5}"/>
                    <constructor-arg name="port" value="${redis.custerqueue.port5}"/>
                </bean>
                <bean class="org.springframework.data.redis.connection.RedisClusterNode">
                   <constructor-arg name="host" value="${redis.custerqueue.host6}"/>
                    <constructor-arg name="port" value="${redis.custerqueue.port6}"/>
                </bean>
            </set>
        </property>
    </bean>
      <!-- redis队列数据接收数据源-->
    <bean id="redisQueuePoolConfig" class="redis.clients.jedis.JedisPoolConfig">
         <!-- 最大空闲数 -->
        <property name="maxIdle" value="${redis.queue.maxIdle}" />
        <!-- 最大空连接数 -->
        <property name="maxTotal" value="${redis.queue.maxTotal}" />
        <!-- 最大等待时间 -->
        <property name="maxWaitMillis" value="${redis.queue.maxWaitMillis}" />
        <!-- 连接超时时是否阻塞，false时报异常,ture阻塞直到超时, 默认true -->
        <property name="blockWhenExhausted"
            value="${redis.queue.blockWhenExhausted}" />
        <!-- 返回连接时，检测连接是否成功 -->
        <property name="testOnBorrow" value="${redis.queue.testOnBorrow}" />
    </bean>
     <bean id="jedisConnectionFactory"
        class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
       <constructor-arg ref="redisQueueConfiguration" />
        <constructor-arg ref="redisQueuePoolConfig" />
    </bean>
    <bean id="redisQueueTemplate"
        class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory"
            ref="jedisConnectionFactory" />
        <property name="keySerializer">
            <bean
                class="org.springframework.data.redis.serializer.StringRedisSerializer" />
        </property>
        <property name="valueSerializer">
            <bean
                class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
        </property>
        <property name="hashKeySerializer">
            <bean
                class="org.springframework.data.redis.serializer.StringRedisSerializer" />
        </property>
        <property name="hashValueSerializer">
            <bean
                class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
        </property>
        <!--开启事务 -->
        <property name="enableTransactionSupport" value="false"></property>
    </bean>
    <bean id="redisQueueCache" class="com.mingtech.application.redis.RedisUtils">
        <property name="redisTemplate" ref="redisQueueTemplate" />
    </bean>
    
    
   <!--******************* Redis队列消息订阅监听使用多个客户端连接进行处理-因为同一个客户端会出现是多个线程之间的阻塞 *******************-->
    <bean id="redisMultitonQueueConfiguration" class="org.springframework.data.redis.connection.RedisClusterConfiguration">
        <property name="maxRedirects" value="3"></property>
        <property name="clusterNodes">
            <set>
                <bean class="org.springframework.data.redis.connection.RedisClusterNode">
                    <constructor-arg name="host" value="${redis.custerqueue.host1}"/>
                    <constructor-arg name="port" value="${redis.custerqueue.port1}"/>
                </bean>
                <bean class="org.springframework.data.redis.connection.RedisClusterNode">
                    <constructor-arg name="host" value="${redis.custerqueue.host2}"/>
                    <constructor-arg name="port" value="${redis.custerqueue.port2}"/>
                </bean>
                <bean class="org.springframework.data.redis.connection.RedisClusterNode">
                    <constructor-arg name="host" value="${redis.custerqueue.host3}"/>
                    <constructor-arg name="port" value="${redis.custerqueue.port3}"/>
                </bean>
                <bean class="org.springframework.data.redis.connection.RedisClusterNode">
                    <constructor-arg name="host" value="${redis.custerqueue.host4}"/>
                    <constructor-arg name="port" value="${redis.custerqueue.port4}"/>
                </bean>
                <bean class="org.springframework.data.redis.connection.RedisClusterNode">
                   <constructor-arg name="host" value="${redis.custerqueue.host5}"/>
                    <constructor-arg name="port" value="${redis.custerqueue.port5}"/>
                </bean>
                <bean class="org.springframework.data.redis.connection.RedisClusterNode">
                   <constructor-arg name="host" value="${redis.custerqueue.host6}"/>
                    <constructor-arg name="port" value="${redis.custerqueue.port6}"/>
                </bean>
            </set>
        </property>
    </bean>
      <!-- redis队列数据接收数据源-->
    <bean id="redisMultitonQueuePoolConfig" class="redis.clients.jedis.JedisPoolConfig">
         <!-- 最大空闲数 -->
        <property name="maxIdle" value="${redis.queue.maxIdle}" />
        <!-- 最大空连接数 -->
        <property name="maxTotal" value="${redis.queue.maxTotal}" />
        <!-- 最大等待时间 -->
        <property name="maxWaitMillis" value="${redis.queue.maxWaitMillis}" />
        <!-- 连接超时时是否阻塞，false时报异常,ture阻塞直到超时, 默认true -->
        <property name="blockWhenExhausted"
            value="${redis.queue.blockWhenExhausted}" />
        <!-- 返回连接时，检测连接是否成功 -->
        <property name="testOnBorrow" value="${redis.queue.testOnBorrow}" />
    </bean>
    <bean id="jedisPrototypeConnectionFactory"
        class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" scope="prototype">
       <constructor-arg ref="redisMultitonQueueConfiguration" />
        <constructor-arg ref="redisMultitonQueuePoolConfig" />
    </bean>
    
    <bean id= "redisMultitonQueueTemplate" class = "org.springframework.data.redis.core.RedisTemplate" scope="prototype">
     <property name="connectionFactory"
            ref="jedisPrototypeConnectionFactory" />
        <property name="keySerializer">
            <bean
                class="org.springframework.data.redis.serializer.StringRedisSerializer" />
        </property>
        <property name="valueSerializer">
            <bean
                class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
        </property>
        <property name="hashKeySerializer">
            <bean
                class="org.springframework.data.redis.serializer.StringRedisSerializer" />
        </property>
        <property name="hashValueSerializer">
            <bean
                class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
        </property>
        <!--开启事务 -->
        <property name="enableTransactionSupport" value="false"></property>
    </bean>
    
    <bean id = "redisMultitonQueueCache" class= "com.mingtech.application.redis.RedisUtils" scope="prototype">
     <property name="redisTemplate" ref="redisMultitonQueueTemplate" />
    </bean>
   
</beans>
