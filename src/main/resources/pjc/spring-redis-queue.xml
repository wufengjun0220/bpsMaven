<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd"
	default-autowire="byName" default-lazy-init="false">
    <!--******************* Redis队列接收使用多个客户端连接进行处理-因为同一个客户端会出现是单线程排队处理 *******************-->
      <!-- redis队列数据接收数据源-->
    <bean id="redisQueuePoolConfig" class="redis.clients.jedis.JedisPoolConfig">
       <!-- 最大空闲数 -->
        <property name="maxIdle" value="${redis.queue.maxIdle}" />
        <!-- 最大空连接数 -->
        <property name="maxTotal" value="${redis.queue.maxTotal}" />
        <!-- 最大等待时间 -->
        <property name="maxWaitMillis" value="${redis.queue.maxWaitMillis}" />
        <!-- 连接超时时是否阻塞，false时报异常,ture阻塞直到超时, 默认true -->
        <property name="blockWhenExhausted"
            value="${redis.queue.blockWhenExhausted}" />
        <!-- 返回连接时，检测连接是否成功 -->
        <property name="testOnBorrow" value="${redis.queue.testOnBorrow}" />
    </bean>
    
     <bean id="jedisQueueConnectionFactory"
        class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" >
        <property name="hostName" value="${redis.queue.host}" />
        <property name="port" value="${redis.queue.port}" />
        <property name="password" value="${redis.queue.password}" />
        <property name="timeout" value="${redis.queue.timeout}" />
        <property name="poolConfig" ref="redisQueuePoolConfig" />
        <property name="usePool" value="true" />
    </bean>
    
    <bean id="redisQueueTemplate"
        class="org.springframework.data.redis.core.RedisTemplate" >
        <property name="connectionFactory"
            ref="jedisQueueConnectionFactory" />
        <property name="keySerializer">
            <bean
                class="org.springframework.data.redis.serializer.StringRedisSerializer" />
        </property>
        <property name="valueSerializer">
            <bean
                class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
        </property>
        <property name="hashKeySerializer">
            <bean
                class="org.springframework.data.redis.serializer.StringRedisSerializer" />
        </property>
        <property name="hashValueSerializer">
            <bean
                class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
        </property>
        <!--开启事务 -->
        <property name="enableTransactionSupport" value="false"></property>
    </bean>
    <bean id="redisQueueCache" class="com.mingtech.application.redis.RedisUtils">
        <property name="redisTemplate" ref="redisQueueTemplate" />
    </bean>
    
     <!--******************* Redis队列消息订阅监听使用多个客户端连接进行处理-因为同一个客户端会出现是多个线程之间的阻塞 *******************-->
    <bean id="redisMultitonQueuePoolConfig" class="redis.clients.jedis.JedisPoolConfig">
       <!-- 最大空闲数 -->
        <property name="maxIdle" value="${redis.queue.maxIdle}" />
        <!-- 最大空连接数 -->
        <property name="maxTotal" value="${redis.queue.maxTotal}" />
        <!-- 最大等待时间 -->
        <property name="maxWaitMillis" value="${redis.queue.maxWaitMillis}" />
        <!-- 连接超时时是否阻塞，false时报异常,ture阻塞直到超时, 默认true -->
        <property name="blockWhenExhausted"
            value="${redis.queue.blockWhenExhausted}" />
        <!-- 返回连接时，检测连接是否成功 -->
        <property name="testOnBorrow" value="${redis.queue.testOnBorrow}" />
    </bean>
     <bean id="jedisMultitonQueueConnectionFactory"
        class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="hostName" value="${redis.queue.host}" />
        <property name="port" value="${redis.queue.port}" />
        <property name="password" value="${redis.queue.password}" />
        <property name="timeout" value="${redis.queue.timeout}" />
        <property name="poolConfig" ref="redisMultitonQueuePoolConfig" />
        <property name="usePool" value="true" />
    </bean>
    <bean id="redisMultitonQueueTemplate"
        class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory"
            ref="jedisMultitonQueueConnectionFactory" />
        <property name="keySerializer">
            <bean
                class="org.springframework.data.redis.serializer.StringRedisSerializer" />
        </property>
        <property name="valueSerializer">
            <bean
                class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
        </property>
        <property name="hashKeySerializer">
            <bean
                class="org.springframework.data.redis.serializer.StringRedisSerializer" />
        </property>
        <property name="hashValueSerializer">
            <bean
                class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
        </property>
        <!--开启事务 -->
        <property name="enableTransactionSupport" value="false"></property>
    </bean>
    <bean id="redisMultitonQueueCache" class="com.mingtech.application.redis.RedisUtils">
        <property name="redisTemplate" ref="redisMultitonQueueTemplate" />
    </bean>
    
    
    
   
</beans>
